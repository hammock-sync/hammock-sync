apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.spotbugs'
apply plugin: 'signing'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
/*
sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
}
*/
java {

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    toolchain {
        sourceCompatibility = JavaLanguageVersion.of(8)
        targetCompatibility = JavaLanguageVersion.of(8)
    }
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'commons-io', name: 'commons-io', version: '2.16.1'
    compileOnly(group: 'com.squareup.okhttp3', name: 'okhttp-urlconnection', version: '3.13.1')

    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.1.1'
    testImplementation 'commons-validator:commons-validator:1.7'
    testImplementation group: 'eu.rekawek.toxiproxy', name: 'toxiproxy-java', version: '2.1.1'

    testImplementation project(':datastore-javase')

}

task copyFixtures(type: Copy) {
    from '../fixture'
    into 'fixture'
}

tasks.withType(Test) {
    dependsOn copyFixtures
    // pick up properties named test.* from command line, gradle.properties first
    System.properties.each { prop ->
        if (prop.key.startsWith("test")) {
            systemProperty prop.key, prop.value
        }
    }
    // the native dir is one directory up from the core project dir
    systemProperty "sqlite4java.library.path", "../datastore-javase/native"
    systemProperty "file.encoding", "UTF-8"

}

task listJars doLast() {
    configurations.testCompile.each { File file -> println file.name }
}

tasks.withType(Test) {
    testLogging {
        // Get full exception info for test failures
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

test {
    useJUnit {
        excludeCategories  \
         'org.hammock.common.RequireRunningCouchDB',  \
         'org.hammock.common.RequireRunningProxy'
    }
}

task integrationTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories  \
         'org.hammock.common.RequireRunningProxy'
    }
}

task unreliableNetworkTest(type: Test, dependsOn: testClasses) {
    systemProperty "test.with.specified.couch", true
    systemProperty "test.couch.port", 8000
    systemProperty "test.couch.proxy.admin.port", 8474
    systemProperty "test.couch.proxy.target.port", 5984
    // Disable keep-alive for these tests otherwise we eventually fill the pool with good
    // connections and the toxicity probabilities don't apply as we expect
    systemProperty "http.keepAlive", false
    // ensure proxy is running!
    filter {
        includeTestsMatching "org.hammock.sync.internal.replication.Unreliable*.*"
    }
}

javadoc {
    include("**/http/*")
    include("**/http/interceptors/*")
    exclude("**/http/Version.java")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Hammock Sync Core Library'
                description = 'Main logic for the Hammock Sync Library'
                url = 'https://github.com/hammock-sync/hammock-sync'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers{
                    developer {
                        name = 'Hammock Sync Team'
                        email = 'hammock-sync@lksnext.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/hammock-sync/hammock-sync.git'
                    url = 'https://github.com/hammock-sync/hammock-sync'
                }
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publishToMavenLocal")}
    sign publishing.publications.mavenJava
}

spotbugs {
    // toolVersion = "3.1.12"
    toolVersion = '4.7.3'
    // Report only high severity bugs for now
    reportLevel = "low"
    // The code base is pretty small so use max effort
    effort = "max"
    // We don't want to run findbugs on the test code yet
    //   sourceSets = [sourceSets.main]
    // Exclude a couple of known bugs until we get the chance to fix them
    if (file("spotbugs_excludes.xml").exists()) {
        excludeFilter = file("spotbugs_excludes.xml")
    }
}

spotbugsTest {
    enabled = false
}