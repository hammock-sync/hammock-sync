apply plugin: 'java'

tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
}

java {
 toolchain {
	sourceCompatibility = JavaLanguageVersion.of(8)
    targetCompatibility = JavaLanguageVersion.of(8)
 }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    implementation project(':cloudant-http')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.14.0'
    implementation group: 'commons-codec', name: 'commons-codec', version:'1.15'
    implementation group: 'commons-io', name: 'commons-io', version:'2.11.0'

    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testImplementation group: 'junit', name: 'junit', version:'4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-all', version:'1.10.19'
    testImplementation 'commons-validator:commons-validator:1.7'
    testImplementation group: 'eu.rekawek.toxiproxy', name: 'toxiproxy-java', version: '2.1.1'

    // will probably test on java se, but it doesn't hurt to have android in too
    testImplementation project(':hammock-sync-datastore-javase')
    //testImplementation project(':cloudant-sync-datastore-android')

}

task copyFixtures(type: Copy) {
    from '../fixture'
    into 'fixture'
}

tasks.withType(Test) {
    // pick up properties named test.* from command line, gradle.properties first
    System.properties.each { prop ->
        if (prop.key.startsWith("test")) {
            systemProperty prop.key, prop.value
        }
    }
    // the native dir is one directory up from the core project dir
    systemProperty "sqlite4java.library.path", "../native"
    systemProperty "file.encoding", "UTF-8"

    /*
    doFirst {
        // we need to copy fixtures to this sub-project
        copyFixtures.execute();
    }
     */
}

task listJars doLast() {
    configurations.testCompile.each { File file -> println file.name }
}

tasks.withType(Test) {
    testLogging {
        // Get full exception info for test failures
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}



test {
    useJUnit {
        excludeCategories \
        'org.hammock.common.SystemTest', \
        'org.hammock.common.RequireRunningCouchDB', \
        'org.hammock.common.PerformanceTest', \
        'org.hammock.common.RequireRunningProxy'
    }
}

task integrationTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories \
        'org.hammock.common.SystemTest', \
        'org.hammock.common.PerformanceTest', \
        'org.hammock.common.RequireRunningProxy'
    }
}

task performanceTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        includeCategories
        'org.hammock.common.PerformanceTest'
    }
}

task systemTest(type: Test, dependsOn: testClasses) {
    // Run all tests except unreliable network test (which requires a proxy)
    useJUnit {
        excludeCategories
        'org.hammock.common.RequireRunningProxy'
    }
}

task unreliableNetworkTest(type: Test, dependsOn: testClasses) {
    systemProperty "test.with.specified.couch", true
    systemProperty "test.couch.port", 8000
    systemProperty "test.couch.proxy.admin.port", 8474
    systemProperty "test.couch.proxy.target.port", 5984
    // Disable keep-alive for these tests otherwise we eventually fill the pool with good
    // connections and the toxicity probabilities don't apply as we expect
    systemProperty "http.keepAlive", false
    // ensure proxy is running!
    filter {
        includeTestsMatching "org.hammock.sync.internal.replication.Unreliable*.*"
    }
}
